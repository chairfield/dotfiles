#+TITLE: Doom config
#+STARTUP: content

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:
[[https://github.com/hlissner/doom-emacs][Doom]] is a configuration framework for Emacs, with a cleaner feel than Spacemacs.

Doom's docs are improving. [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/org][Here]] are its Org mode docs, including a note on how
to revert the change it made to TAB cycling. Doom groups configuration settings
on a per-module basis (e.g., [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/config.el][org/config.el]]).

* Configs
** Installation Script: Symlink Config Files
#+BEGIN_SRC sh :tangle sh/install-emacs-doom.sh
mkdir -p ~/.config/doom
ln -svf $PWD/out/emacs-doom-config ~/.config/doom/config.el
ln -svf $PWD/out/emacs-doom-init ~/.config/doom/init.el
ln -svf $PWD/out/emacs-doom-packages ~/.config/doom/packages.el
#+END_SRC

** init.el
#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-init
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life
       ;;vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ; The +format-on-save-enabled-mode symbol sets which major modes to format on save
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       (debugger +lsp)   ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ; Since I'm tangling more than just config.el, the literate module "won't cut it"
       ; Brainstormed options:
       ; - Zsh precmd to run make on dotfiles before the doom command
       ; - Alias doom to do the same
       ; - Build in a doom sync command from within doom itself
       ; - Remove init.el from my literate emacs-doom.org
       ;;literate
       (default +bindings +smartparens))
#+END_SRC

** config.el
#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Chris Hairfield"
      user-mail-address "chairfield@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC
*** Disable exit prompt :ARCHIVE:
Disables exit prompt if there are no unsaved changes.

Source is a comment by hlissner [[https://github.com/doomemacs/doomemacs/issues/2688#issuecomment-596684817][here]].

#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
;(setq confirm-kill-emacs nil)
#+END_SRC
*** Fix Kinesis external keyboard on MacOS by disabling character composition on right option key
*Intended behavior:* Win key on Kinesis freestyle serves as Emacs meta key

*Actual behavior:* On the Kinesis only, pressing Win-<key> would insert special characters.

*Background*:

In MacOS settings for external Windows keyboard, I swap the Command and Option
modifier keys; this makes Alt on Windows keyboards act as Command, which is
handy as they're in the same keyboard location.

The Kinesis Freestyle only has one Win key, which is on the left-hand side.
However, I discovered through the [[https://manytricks.com/keycodes/][Key Codes]] app that its Win key was being
interpreted as a right-sided Option key. Example:
#+BEGIN_QUOTE
NX_ALTERNATEMASK / kCGEventFlagMaskAlternate / NSAlternateKeyMask
	= 524288 / 0x80000
NX_DEVICERALTKEYMASK
	= 64 / 0x40
#+END_QUOTE

Doom Emacs intentionally treats the right option modifier differently than the
left one ([[https://github.com/doomemacs/doomemacs/issues/4178#issuecomment-718394618][issues/4178]]) in order to retain the ability to use special character
composition. I never use this MacOS-only feature, so the following code
configures the right option key to act as meta---just as the left one already
does:
#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
(cond
 (IS-MAC
  ;; mac-* variables are used by the special emacs-mac build of Emacs by
  ;; Yamamoto Mitsuharu, while other builds use ns-*.
  (setq mac-right-option-modifier 'meta
        ns-right-option-modifier  'meta)))
#+END_SRC
*** =company-mode=
**** Disable auto-completion
Disable auto-completion to avoid =company-mode= interfering with =yasnippet=
completion. There may be a better way to accomplish this built into Doom and/or
=company-mode= itself.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
(after! company (+company/toggle-auto-completion))
#+END_SRC
**** Trigger manual completion with =C-;=
[[https://github.com/doomemacs/doomemacs/blob/master/modules/config/default/%2Bevil-bindings.el][+evil-bindings.el]] contains the following line when the =company= module is
active, which doesn't seem to work:
#+BEGIN_SRC emacs-lisp
      :i "C-SPC"  (cmds! (not (minibufferp)) #'company-complete-common)
#+END_SRC

Regardless, =C-SPC= interferes with my global application launcher shortcut.

My solution is to bind =C-;=, the same keybind that [[https://github.com/doomemacs/doomemacs/blob/1f4b9b73fc273e0736bdbc9f044995be65f50ce1/modules/config/default/%2Bemacs-bindings.el][+emacs-bindings.el]] uses.
Before committing to this solution, I verified the following:
- That =C-;= was unbound using the =describe-key= command (bound to =C-h k KEY=)
- That =+company/complete= was unbound using the =describe-function= command
  (bound to =C-h f FUNCTION=)

#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
(after! company
        (map! (:when (featurep! :completion company)
                     "C-;" #'+company/complete)))
#+END_SRC
*** =go-mode=
#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
(after! go-mode
        (map! :map go-mode-map
              :localleader
              "f" #'gofmt))
#+END_SRC
*** =dap-hydra= (provided by emacs-lsp/dap-mode)
Override Doom's default "Start debugger" function (+debugger/start) because =dap-hydra=
is so easy to use. Once in the hydra, =dl= starts the debugger with its last configuration,
=bb= toggles breakpoints, etc.

When DAP is running, Doom also adds =dap-hydra= to =SPC m d=. That's fine, but I prefer
the hydra-first workflow as it beats the alternatives:
- Set initial breakpoint by mouse-clicking the left gutter or =M-x dap-breakpoint-add=
- Start the debugger with =M-x +debugger/start= or =M-x dep-debug=

#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
(after! evil
        (map! :leader
              (:prefix-map ("o" . "open")
                           :desc "Open dap-hydra" "d" #'dap-hydra)))
#+END_SRC

*** BUGFIX(Doom) :editor/(format +onsave) for =ledger-mode=
Bug tree:
- variable: =before-save-hook=
  - function: =format-all-buffer--from-hook= (upstream format-all.el)
    - advice: =+format--all-buffer-from-hook-a= (Doom's [[https://github.com/doomemacs/doomemacs/blob/d5ccac5d71c819035fa251f01d023b3f94b4fba4/modules/editor/format/config.el#L77][editor/format/config.el]])

I reported my findings to Doom's issue tracker here: [[https://github.com/doomemacs/doomemacs/issues/6936#issuecomment-1366030502][#6936]]

#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
; I tried every iteration of (after!, to no avail. Calling it directly from config.el seems to work.
(advice-remove 'format-all-buffer--from-hook '+format--all-buffer-from-hook-a)

; I can't use the following until Doom V3 is ready, per hlissner here:
; https://github.com/doomemacs/doomemacs/issues/6852#issuecomment-1260085613
;; (use-package-hook! format
;;   :post-config
;;   (advice-remove 'format-all-buffer--from-hook '+format--all-buffer-from-hook-a)
;;   t)
#+END_SRC

This bug taught me a lot about debugging emacs:
- SPC o r :: open REPL (for elisp)
- SPC c s :: code send to REPL
- gr :: execute the region within the current buffer (visual block supported)
  - This is extremely useful for debugging code in context, though still more manual than a debugger
- before-save-hook :: (variable) list of function hooks called before saving a buffer
- +format--all-buffer-from-hook-a :: Doom's hack advice function
  - For future debugging sessions, I might be best off replacing Doom's config with a manual =use-package!=
    - If that fixes the issue, I can try bisecting Doom's config, or just start by removing all its hacks

** packages.el
#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-packages
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+END_SRC

** =yasnippet= (multi-file)
*** Design
My goal is to share both a snippet and file-template =yasnippet= collection, stored in my dotfile repo,
between multiple Emacs configs. File templates, especially automatic ones, are handy for multi-faceted
structures that recur frequently (project planning, unit tests, etc.). Having both under my
control makes updating them easiest, and avoids surprises.

Doom has its own code for automatically applying file templates ([[https://docs.doomemacs.org/latest/modules/editor/file-templates/][modules/editor/file-templates]]). I've
copied much of that code into my vanilla Emacs, so both it and Doom share automatic expansion of the same
file templates.

I've shared snippets and file templates with my Spacemacs main config, but opted to skip supporting
automatic template expansion. Manual invocation is simple enough, as most default file templates are
named =__= by convention.

Doom's default =yasnippet= configuration is for =yas-snippet-dirs= to be set to:
=(+snippets-dir doom-snippets-dir +file-templates-dir)=

The plan for each is as follows:
- =+snippets-dir= :: Use as configured; Doom defaults this variable to $DOOMDIR/snippets (=~/.config/doom/snippets=).
- =doom-snippets-dir= :: Disable Doom's built-in snippets entirely (see: packages.el).
- =+file-templates-dir= :: Set this to =~/.config/doom/file-templates= (see: config.el) and symlink.

*** Installation Script: Link Snippet Dirs
Symlink the following into =doom-user-dir=:
- =~/.config/doom/snippets=
- =~/.config/doom/file-templates=

#+BEGIN_SRC sh :tangle sh/install-emacs-doom.sh
ln -svf $PWD/snippets ~/.config/doom
ln -svf $PWD/file-templates ~/.config/doom
#+END_SRC

*** config.el
Note that this is one of the exceptions to the rule of wrapping config changes in an =after!= block,
specifically "Setting doom variables (which start with 'doom-' or '+')".

#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-config
(when (featurep! :editor file-templates)
  (setq +file-templates-dir (expand-file-name "file-templates/" doom-user-dir))
  (set-file-templates!
   '("/natural-planning\\.org$" :trigger "__natural-planning.org" :mode org-mode))
  )
#+END_SRC

*** packages.el
[[https://github.com/doomemacs/doomemacs/blob/master/modules/editor/snippets/README.org#disabling-the-built-in-snippets][Disables Doom's built-in snippets]]. This removes the middle =doom-snippets-dir= entry
from =yas-snippet-dirs=, leaving it set to =(+snippets-dir +file-templates-dir)=.

=doom-snippets-dir= was set to =~/.doom-emacs/.local/straight/build-28.1/doom-snippets/=.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-doom-packages
(package! doom-snippets :ignore t)
#+END_SRC

** Installation Script: Install and Sync
#+BEGIN_SRC sh :tangle sh/install-emacs-doom.sh
doom --doomdir ~/.config/doom install
doom --doomdir ~/.config/doom sync
doom --doomdir ~/.config/doom doctor
#+END_SRC

* Task List
** TODO Set DOOMDIR env var via this dotfiles repo
=.zshrc= is still managed by https://github.com/chairfield/dotphiles

Once =.zshrc= is generated from this repo, I can tangle the =export
DOOMDIR=~/.config/doom= line from here directly to =.zshrc=, followed by
removing the explicit =--doomdir ~/.config/doom= argument on each =doom=
invocation above.

** TODO Migrate narrow/widen keybinds from spacemacs
