#+TITLE: Yabai, spacebar, and skhd dotfiles
#+STARTUP: content

* Installation Script
:PROPERTIES:
:CUSTOM_ID: introduction
:END:
Generate a script to install [[https://github.com/koekeishiya/yabai][yabai]]-related dotfiles:

#+BEGIN_SRC sh :tangle sh/install-yabai.sh
if [ "$(uname 2> /dev/null)" != "Darwin" ]; then
  echo "Skipping MacOS yabai installation"
  exit 0
fi

ln -sfv $PWD/out/yabairc ~/.yabairc
chmod +x ~/.yabairc
ln -sfv $PWD/out/spacebarrc ~/.spacebarrc
chmod +x ~/.spacebarrc
ln -sfv $PWD/out/skhdrc ~/.skhdrc
#+END_SRC

* Manual Steps
** Disable automatic reordering of spaces
Per the [[https://github.com/koekeishiya/yabai/wiki/Tips-and-tricks#fix-spaces-reordering-automatically][Tips and tricks]] page on yabai's wiki, uncheck the following:

[[file:images/yabai-setting-do-not-reorder-spaces.png]]

* Configs
** .yabairc
:PROPERTIES:
:CUSTOM_ID: yabairc
:END:
[[https://github.com/koekeishiya/yabai][yabai]] is a tiling window management utility for MacOS.

#+BEGIN_SRC sh :tangle out/yabairc
#!/usr/bin/env sh

[[ -o interactive ]] && echo "+++Reading .yabairc"

# Since MacOS 11 (Big Sur), yabai must load the scripting-addition here. This required allowing this command in /etc/sudoers first.
# https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)#macos-big-sur---automatically-load-scripting-addition-on-startup
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa

# https://github.com/koekeishiya/yabai/wiki/Configuration#tiling-options
## Layout
yabai -m config layout                       bsp
yabai -m config window_placement             second_child
## Padding and gaps
yabai -m config top_padding                  26
yabai -m config bottom_padding               0
yabai -m config left_padding                 0
yabai -m config right_padding                0
yabai -m config window_gap                   0
## Split ratios
yabai -m config auto_balance                 off
yabai -m config split_ratio                  0.50

# https://github.com/koekeishiya/yabai/wiki/Configuration#mouse-support
yabai -m config mouse_modifier               alt
yabai -m config mouse_action1                move
yabai -m config mouse_action2                resize
yabai -m config focus_follows_mouse          off
yabai -m config mouse_follows_focus          off

# https://github.com/koekeishiya/yabai/wiki/Configuration#window-modifications
yabai -m config window_topmost               on
yabai -m config window_shadow                float
yabai -m config window_opacity               off
yabai -m config window_opacity_duration      0.0
yabai -m config active_window_opacity        1.0
yabai -m config normal_window_opacity        0.90
yabai -m config window_border                on
yabai -m config window_border_width          5
yabai -m config active_window_border_color   0xffa85a22
yabai -m config normal_window_border_color   0xff5a5a5a
yabai -m config insert_window_border_color   0xffd75f5f

# application rules (source: https://github.com/koekeishiya/yabai/blob/master/doc/yabai.asciidoc#rule)
yabai -m rule --add app="^Anki$" manage=off
yabai -m rule --add app="^Calculator$" manage=off

# I don't know why this doesn't work, but it breaks things badly
# I should probably just make it so that cmd + shift - a destroys space 7 if it's empty and there are 11 spaces
# though this might not be perfect since fullscreen apps can become an extra space, and I don't always have a window on space 7
# yabai -m signal --add event=display_added action="yabai -m space --focus 7 && yabai -m space --destroy"
#+END_SRC

** .spacebarrc
:PROPERTIES:
:CUSTOM_ID: spacebarrc
:END:
[[https://github.com/somdoron/spacebar][spacebar]] is a status bar for the [[https://github.com/koekeishiya/yabai][yabai]] tiling window manager that was split off
from the yabai repo at its 3.0.0 release.

#+BEGIN_SRC sh :tangle out/spacebarrc
#!/usr/bin/env sh

[[ -o interactive ]] && echo "+++Reading .spacebarrc"

spacebar -m config text_font         "Helvetica Neue:Bold:12.0"
spacebar -m config icon_font         "Font Awesome 5 Free:Solid:12.0"
spacebar -m config background_color  0xff202020
spacebar -m config foreground_color  0xffa8a8a8
spacebar -m config space_icon_color  0xffa85a22
spacebar -m config space_icon_strip  1-EN 2-emacs 3-ff 4 5 6 7 8 9 0
spacebar -m config power_icon_strip   
spacebar -m config clock_icon        
spacebar -m config clock_format      "%a %b %d, %l:%M %p"
#+END_SRC
** .skhdrc
:PROPERTIES:
:CUSTOM_ID: skhdrc
:END:
[[https://github.com/koekeishiya/skhd][skhd]] is a MacOS hotkey daemon that I am primarily using for driving [[https://github.com/koekeishiya/yabai][yabai]],
but it's general-purpose.

*** Focus Window: (⌥) - h/j/k/l
#+BEGIN_SRC sh :tangle out/skhdrc
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east
#+END_SRC

*** Swap Window: (⌥ + ⇧) - h/j/k/l
#+BEGIN_SRC sh :tangle out/skhdrc
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east
#+END_SRC

*** Warp Window: (cmd + ⇧) - h/j/k/l
#+BEGIN_SRC sh :tangle out/skhdrc
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east
#+END_SRC

*** Focus Space: (cmd) - #
#+BEGIN_SRC sh :tangle out/skhdrc
cmd - 1 : yabai -m space --focus 1
cmd - 2 : yabai -m space --focus 2
cmd - 3 : yabai -m space --focus 3
cmd - 4 : yabai -m space --focus 4
cmd - 5 : yabai -m space --focus 5
cmd - 6 : yabai -m space --focus 6
cmd - 7 : yabai -m space --focus 7
cmd - 8 : yabai -m space --focus 8
cmd - 9 : yabai -m space --focus 9
cmd - 0 : yabai -m space --focus 10
#+END_SRC

*** Send Window to Space, Fast Follow: (cmd + ⇧) - #
#+BEGIN_SRC sh :tangle out/skhdrc
shift + cmd - 1 : yabai -m window --space  1; yabai -m space --focus 1
shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
shift + cmd - 3 : yabai -m window --space  3; yabai -m space --focus 3
shift + cmd - 4 : yabai -m window --space  4; yabai -m space --focus 4
shift + cmd - 5 : yabai -m window --space  5; yabai -m space --focus 5
shift + cmd - 6 : yabai -m window --space  6; yabai -m space --focus 6
shift + cmd - 7 : yabai -m window --space  7; yabai -m space --focus 7
shift + cmd - 8 : yabai -m window --space  8; yabai -m space --focus 8
shift + cmd - 9 : yabai -m window --space  9; yabai -m space --focus 9
shift + cmd - 0 : yabai -m window --space 10; yabai -m space --focus 10
#+END_SRC

*** Toggle BSP Split: (⌥) - s
#+BEGIN_SRC sh :tangle out/skhdrc
alt - s : yabai -m window --toggle split
#+END_SRC

*** Create Temp Space 7, Display 2: (cmd + ctrl) - a
#+BEGIN_SRC sh :tangle out/skhdrc
# complex, but a victory since Mission Control is notoriously unscriptable
# command to run manually before unplugging display 2
# steps and reasoning:
# 1. focus space 7: so that when we move the new space to display 2, it'll be in space 8 (always moves to after the last focused space on that display)
# 2. focus space 6: could be 1-5 too, just needs to be on first display so that the new space will be on display 1
# 3. create new space: becomes space 7 on display 1, pushing spaces 7-10 to 8-11
# 4. focus space 7: focus this new space
# 5. move space 7 to display 2: makes it space 8, the 2nd space on display 2 (so now there are 5 spaces on display 2)
# 6. swap with space 7: so that display 2 has the empty space first, then the original 4 spaces in 8-11
# at this point, when I unplug display 2 it will destroy the empty space 7, as it always destroys the first space on the removed display
cmd + ctrl - a : yabai -m space --focus 7; yabai -m space --focus 6; yabai -m space --create; yabai -m space --focus 7; yabai -m space --display 2; yabai -m space --swap 7
#+END_SRC

*** Open iTerm Window: (⌥) - ↩
Note: =cmd - return= conflicts with apps that use =return= for a newline in a textbox.

#+BEGIN_SRC sh :tangle out/skhdrc
# Open iTerm2. Might need to isable iTerm2's use of that first, in Preferences -> Keys ->
# Key Bindings, add an entry for cmd + ret to perform the Ignore actiom.
alt - return : open -na /Applications/iTerm.app
#+END_SRC

*** Disable Built-in Hotkeys
It's possible to disable built-in hotkeys like =cmd h=, which I often accidentally hide a window with.
The skhd syntax is specific.

#+BEGIN_SRC sh :tangle out/skhdrc
cmd - h : :
#+END_SRC

* Management
** yabai
*** Clearing old entries from Security & Privacy settings
One can reset the Transparency, Consent, and Control (TCC) database with the
=tccutil reset <service>= command line, but it's possible to edit manually.

To open the TCC database and inspect the access table:
#+BEGIN_SRC
% sqlite3 Library/Application\ Support/com.apple.TCC/TCC.db
sqlite> pragma table_info("access");
#+END_SRC

To remove yabai entries:
#+BEGIN_SRC
sqlite> DELETE FROM "access" WHERE client LIKE "%yabai%";
#+END_SRC
