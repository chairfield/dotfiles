#+TITLE: Spacemacs config
#+STARTUP: content

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:
[[https://github.com/syl20bnr/spacemacs][Spacemacs]] is my primary Emacs configuration. It's serving as an excellent
framework to learn Emacs in as it's rich in features yet avoids customizing the
modes I use regularly, especially Org mode.

** Install script
Spacemacs comes prepared with its default layers, but it expects them in
=~/.config/spacemacs/layers=, so symlink the layers directory in addition to
configuring the =.el= files.

Though Spacemacs warns about not finding the =~/.config/spacemacs/layers=
directory, do not attempt to symlink =~/.spacemacs/layers= there. That results
in a duplication warning for every package.

#+BEGIN_SRC sh :tangle sh/install-emacs-spacemacs.sh
mkdir -p ~/.config/spacemacs
ln -svf $PWD/out/emacs-spacemacs-init ~/.config/spacemacs/init.el
if [ ! -f ~/.config/spacemacs/custom.el ]; then
  cp $PWD/out/emacs-spacemacs-custom ~/.config/spacemacs/custom.el
fi
#+END_SRC

** init.el
#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.
#+END_SRC

*** layers
Per Spacemacs:
#+BEGIN_QUOTE
"Configuration Layers declaration.

You should not put any user code in this function besides modifying the variable
values."
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
(defun dotspacemacs/layers ()
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     markdown
     csv
     shell-scripts
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     ivy
     ;; auto-completion
     ;; better-defaults
     emacs-lisp
     git
     ;; markdown
     org
     pandoc
     ;; (shell :variables
     ;;        shell-default-height 30
     ;;        shell-default-position 'bottom)
     ;; spell-checking
     ;; syntax-checking
     ;; version-control
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(
     yasnippet)
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(org-projectile)
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))
#+END_SRC

*** init
Per Spacemacs:
#+BEGIN_QUOTE
"Initialization function.

This function is called at the very startup of Spacemacs initialization before
layers configuration.

You should not put any user code in there besides modifying the variable
values."
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
(defun dotspacemacs/init ()
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ))
#+END_SRC

*** user-init
Per Spacemacs:
#+BEGIN_QUOTE
"Initialization function for user code.

It is called immediately after `dotspacemacs/init', before layer configuration
executes.

This function is mostly useful for variables that need to be set before packages
are loaded. If you are unsure, you should try in setting them in
=dotspacemacs/user-config= first."
#+END_QUOTE

Per [[https://github.com/syl20bnr/spacemacs/issues/7443][issues/7443]] and the [[https://develop.spacemacs.org/doc/DOCUMENTATION.html#custom-variables][docs]], set a custom, untracked file location for the
[[http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html][package-selected-packages]] variable introduced in Emacs 25.1.
=package-selected-packages= is unnecessary when using a framework like
Spacemacs, so this setting prevents the feature from cluttering my Spacemacs
=init.el=.

It also seems possible that one could disable the feature altogether (see [[https://www.reddit.com/r/emacs/comments/4x655n/packageselectedpackages_always_appear_after/][this
thread]]), though I see benefit in allowing temporary customizations.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
(defun dotspacemacs/user-init ()
  (setq custom-file (expand-file-name "custom.el" dotspacemacs-directory))
  (load custom-file))
#+END_SRC

Create an empty =custom.el= file to be copied (not symlinked!) if it does not
exist. I don't symlink because I want customizations to persist across =make=
invocations. Ideally, I'll move any customizations worth keeping into the
[[#user-config][user-config]] section.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-custom
(custom-set-variables)
(custom-set-faces)
#+END_SRC

*** user-config
:PROPERTIES:
:CUSTOM_ID: user-config
:END:
Per Spacemacs:
#+BEGIN_QUOTE
"Configuration function for user code.

This function is called at the very end of Spacemacs initialization after layers
configuration.

This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
#+END_QUOTE

Open the section.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
(defun dotspacemacs/user-config ()
#+END_SRC

Imports Unicode characters like é and ¼, accessible via the =C-x 8= prefix key.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (require 'iso-transl)
#+END_SRC

Specify undo-redo (u / C-r) support in evil mode. This wasn't required before,
and isn't required on Spacemacs' =develop= branch, but I don't want to switch.
Undo tree is installed in Spacemacs by default.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree)
#+END_SRC

Automatically split window vertically (left/right) if the current window is more
than 166 columns wide. This cutoff was chosen to ensure that there's padding if
displaying 2 80-character buffers side-by-side. Otherwise, place the new buffer
in the least recently used window. [[https://stackoverflow.com/a/25587333][Source]].

I could have accomplished something similar by setting =split-height-threshold=
and =split-width-threshold=, which adjust how the =split-window-sensibly=
function operates. However, =split-window-sensibly= always prefers splitting
horizontally over vertically, so a process like this wouldn't be possible:
1. If the current window is more than 160 characters, split vertically.
2. Else split the current window horizontally.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (defun display-new-buffer (buffer force-other-window)
    "If BUFFER is visible, select it.

    If it's not visible and there's only one window, split the
    current window and select BUFFER in the new window. If the
    current window (before the split) is more than 166 columns
    wide, split horizontally (left/right), else split
    vertically (up/down). If the current buffer contains more than
    one window, select BUFFER in the least recently used window.

    This function returns the window which holds BUFFER.
    FORCE-OTHER-WINDOW is ignored."
    (or (get-buffer-window buffer)
      (if (one-window-p)
          (let ((new-win
                 (if (> (window-width) 166)
                     (split-window-horizontally)
                   (split-window-vertically))))
            (set-window-buffer new-win buffer)
            new-win)
        (let ((new-win (get-lru-window)))
          (set-window-buffer new-win buffer)
          new-win))))
  ;; use display-buffer-alist instead of display-buffer-function if the following
  ;; line won't work
  (setq display-buffer-function 'display-new-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (defun gtd ()
    (interactive)
    (find-file "~/Org/gtd/projects.org"))

  (setq-default org-catch-invisible-edits 'smart)

  ;; Enables `org-indent-mode` for all files, displaying files in a virtual buffer
  ;; with 2-space indents per heading and section text aligned with its heading
  ;; title. Doing this solves an annoying behavior with default Spacemacs
  ;; regarding changing section depth with `M-right`. Now, I can adjust section
  ;; depth and the section text in my underlying org files remains left-justified.
  (use-package org
    :config
    (setq org-startup-indented t))

  ;; Disable tab emulation so that <tab> will /always/ cycle the current subtree
  ;; visibility, instead of only doing so when the cursor is on the headline.
  (setq org-cycle-emulate-tab nil)

  ;; Save the target archive buffer after archiving a subtree. Requires org-mode
  ;; version 9.4+.
  (setq org-archive-subtree-save-file-p t)

  ;; Fix bug in spacemacs master branch with org-set-tags.
  ;; Source: https://emacs.stackexchange.com/questions/48906/spacemacs-error-wrong-type-argument-commandp-org-set-tags-when-setting-tag
  (with-eval-after-load 'org
    ;; Replace org-set-tags with Counsel in keybinding
    (spacemacs/set-leader-keys-for-major-mode 'org-mode ":" 'counsel-org-tag))

  (setq org-agenda-files
        '("~/Org/gtd/inbox.org"
          "~/Org/gtd/projects.org"
          "~/Org/gtd/tickler.org"))
#+END_SRC

Entry types:
- file :: Text will be placed at the end of the file (beginning with an option)
- file+datetree :: Enters text in datetree for current day
- file+datetree+prompt :: Enters text in datetree for prompted day

Template expansions:
- '%<%H:%M>' :: Calls [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html][format-time-string]], in this case printing 24-hour time
- '%i' :: Initial content, pasted from whatever was in the active selection
- '%K' :: Auto-genned link to the currently-clocked task
- '%a' :: Auto-genned link resulting from org-store-link under cursor
- '%U' :: Inactive timestamp with date+time
- '%?' :: After completing the template, position point here

I considered the popular =org-journal= package, but found that =org-capture= is
powerful enough and I'd rather err on the side of too few packages than too
many. Credit for the core of my journal template goes to [[https://sachachua.com/blog/2014/11/using-org-mode-keep-process-journal/][Sasha Chua]].

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (setq org-capture-templates
        '(("t" "TODO [inbox]" entry
           (file "~/Org/gtd/inbox.org")
           "* TODO %i%?")
          ("T" "Tickler" entry
           (file "~/Org/gtd/tickler.org")
           "* %i%? \n %U")
          ("j" "Journal Entry" entry
           (file+datetree+prompt "~/Org/journal.org")
           "* %<%H:%M> %K - %a\n%?" :tree-type week)
          ("g" "Gratitudes" entry
           (file+datetree "~/Org/gratitudes.org")
           "_%<%H:%M>_\n1. %i%?" :tree-type week)))
#+END_SRC

My naming of these keywords prioritizes consistent widths (4-character), relying
on color-coding for differentiation, at the slight expense of typeability (most
noticeable when typing =NEXT=, versus the shorter alternative of =NA=).

While a =PROJ= keyword isn't strictly necessary (I try to keep track of
sub-projects with a =[/]= in parent headers), I'm experimenting with maintaining
it in order to allow efficient filtering of currently-active projects via sparse
trees and the agenda view.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (setq org-todo-keywords
        '((sequence
           "TODO(t)" "NEXT(n)" "PROJ(p)" "WAIT(w)"
           "|" "DONE(d)")))
#+END_SRC

The =M-x list-colors-display= command shows each pre-defined color, though I can
use RGB triplets for maximum flexibility. There also exist the pre-defined faces
=org-todo=, =org-warning=, =org-done=, and a few others. Disable =hl-todo-mode=,
as it overwrites some of my =org-todo-keyword-faces= settings.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1)))
  (setq org-todo-keyword-faces
        '(("TODO" . "#cc9393")
          ("WAIT" . "violet")
          ("PROJ" . "light slate gray")
          ("NEXT" . "#bf4747")
          ("DONE" . "#96e396")))
#+END_SRC

Load the [[https://github.com/joaotavora/yasnippet][YASnippet]] template system. My implementation is described in
[[./emacs-yasnippet.org]].

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (require 'yasnippet)
  (yas-global-mode 1)
  (setq yas-snippet-dirs '("~/.emacs-snippets"))
#+END_SRC

Settings for =org-pomodoro=.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  ;; Simplify the format of the mode line string during a pomodoro session.
  (setq org-pomodoro-format "%s")
  ;; Allows me to extend past the 25-minute pomodoro time limit.
  (setq org-pomodoro-manual-break t)
  ;; Keeps the clocked time of killed pomodoros.
  (setq org-pomodoro-keep-killed-pomodoro-time t)
  (setq org-pomodoro-overtime-sound-args "-volume 0.2")
  (setq org-pomodoro-finished-sound-args "-volume 0.2")
  (setq org-pomodoro-long-break-sound-args "-volume 0.2")
  (setq org-pomodoro-short-break-sound-args "-volume 0.2")
#+END_SRC

Settings for =org-refile=.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (setq org-refile-targets
        '(("~/Org/gtd/agendas.org" :level . 1)
          ("~/Org/gtd/backburner.org" :level . 0)
          ("~/Org/gtd/inbox.org" :level . 0)
          ("~/Org/gtd/projects.org" :maxlevel . 1)
          ("~/Org/gtd/someday-maybe.org" :level . 1)
          ("~/Org/gtd/tickler.org" :level . 1)))
  ;; Shows the filename and full heading path, rather than just the heading
  ;; itself. Allows refiling to the top level of a file.
  (setq org-refile-use-outline-path 'file)
  ;; Disables multi-step refile, showing file and headers in one go. Org docs
  ;; recommend this when using a completion package, which Spacemacs does.
  (setq org-outline-path-complete-in-steps nil)
  ;; Allows me to create new parent nodes from Helm during refile on the fly.
  ;; Do so by appending "/New Heading" to the Helm query. Unfortunately, atm,
  ;; the Helm query must match the full entry name.
  ;; TODO: Learn how to append a parent to a partial Helm match
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (use-package org-download
    :after org
    :config
    (setq-default org-download-image-dir "~/Org/media/")
    (if (equal system-type 'darwin)
      (setq org-download-screenshot-method "/usr/sbin/screencapture -i %s")))
#+END_SRC

Setup the [j]ump [t]imer key chord. Input an arbitrary amount of consecutive
chars, jump to the first one with a tree.

Use it as follows:
1. Invoke it
2. Start typing any number of characters for the search
   - After =avy-timeout-seconds= (0.5s by default), the results will be shown
3. If there are multiple results, use avy-style jumping to select the desired
   match; otherwise, the cursor will automatically move to the only match

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  ;; Be careful - some key in a layer I don't have installed yet may use this
  ;; sequence.
  (spacemacs/set-leader-keys "jt" 'avy-goto-char-timer)
  ;; Avy offers two org-mode commands:
  ;; - avy-org-goto-heading-timer: like above, but for headings only
  ;; - avy-org-refile-as-child: like standard refile, but makes it easy to
  ;;   refile to headings visible in other windows or buffers
  ;; Avy is also customizable, should I want non-default functionality.
#+END_SRC

Settings for org-mode's export, specifically LaTeX export.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  ;; The last level which is still exported as a headline.
  ;;
  ;; Inferior levels will usually produce itemize or enumerate lists when
  ;; exported, but back-end behavior may differ.
  ;;
  ;; This option can also be set with the OPTIONS keyword, e.g. "H:2".
  ;;
  ;; Here I override the default of 3 for all files. This is particularly useful
  ;; in *book document classes.
  (setq org-export-headline-levels 5)

  ;; Add in the titletoc package before hyperref to support local TOCs,
  ;; per https://orgmode.org/manual/Table-of-Contents.html
  ;; TODO Update this to simply insert titletoc directly before hyperref, rather than overwriting the list---overwriting risks breaking me on future Emacs updates
  (setq org-latex-default-packages-alist
    '(("AUTO" "inputenc"  t ("pdflatex"))
      ("T1"   "fontenc"   t ("pdflatex"))
      (""     "graphicx"  t)
      (""     "grffile"   t)
      (""     "longtable" nil)
      (""     "wrapfig"   nil)
      (""     "rotating"  nil)
      ("normalem" "ulem"  t)
      (""     "amsmath"   t)
      (""     "textcomp"  t)
      (""     "amssymb"   t)
      (""     "capt-of"   nil)
      (""     "titletoc"  nil)
      (""     "hyperref"  nil)))
#+END_SRC

I found these [[https://ctan.org/pkg/koma-script?lang=en][KOMA script]] classes on [[https://orgmode.org/worg/org-tutorials/org-latex-export.html][Worg]], which I slightly prefer the format
of.

A handy trick I found for when I wanted my exports to include wide-margin
section headers without making them org headlines is the =\minisec{...}=
command. It's specific to KOMA and is used for, in =koma-book= at least,
5th-level org-headlines. See section 3.6 of the [[http://www.ctex.org/documents/packages/nonstd/koma-script.pdf][KOMA Script spec]] for more.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (add-to-list 'org-latex-classes
               '("koma-article"
                 "\\documentclass[letterpaper]{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
               )
  (add-to-list 'org-latex-classes
               '("koma-book"
                 "\\documentclass[letterpaper]{scrbook}"
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
               )
#+END_SRC

Reload org to fix a spacemacs bug related to =org-startup-indented=, introduced
when upgrading Spacemacs packages, per [[https://emacs.stackexchange.com/questions/54005/problem-with-org-startup-indented][StackExchange]].

I find it unfortunate that so many Spacemacs users recommend such a hack.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  (org-reload)
#+END_SRC

Close the section.

#+BEGIN_SRC emacs-lisp :tangle out/emacs-spacemacs-init
  )
#+END_SRC
